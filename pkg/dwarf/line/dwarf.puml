@startuml
namespace line {
    class DebugLineInfo << (S,Aquamarine) >> {
        - stateMachineCache <font color=blue>map</font>[uint64]*StateMachine
        - lastMachineCache <font color=blue>map</font>[uint64]*StateMachine
        - debugLineStr []byte
        - staticBase uint64
        - normalizeBackslash bool
        - ptrSize int
        - endSeqIsValid bool

        + Prologue *DebugLinePrologue
        + IncludeDirs []string
        + FileNames []*FileEntry
        + Instructions []byte
        + Lookup <font color=blue>map</font>[string]*FileEntry

        - stateMachineForEntry(basePC uint64) *StateMachine
        - stateMachineFor(basePC uint64, pc uint64) *StateMachine

        + AllPCsForFileLines(f string, m <font color=blue>map</font>[int][]uint64) 
        + AllPCsBetween(begin uint64, end uint64, excludeFile string, excludeLine int) ([]uint64, error)
        + PCToLine(basePC uint64, pc uint64) (string, int)
        + LineToPCs(filename string, lineno int) []PCStmt
        + PrologueEndPC(start uint64, end uint64) (uint64, string, int, bool)
        + FirstStmtForLine(start uint64, end uint64) (uint64, string, int, bool)
        + FirstFile() string
    }
    class DebugLinePrologue << (S,Aquamarine) >> {
        + UnitLength uint32
        + Version uint16
        + Length uint32
        + MinInstrLength uint8
        + MaxOpPerInstr uint8
        + InitialIsStmt uint8
        + LineBase int8
        + LineRange uint8
        + OpcodeBase uint8
        + StdOpLengths []uint8

    }
    class FileEntry << (S,Aquamarine) >> {
        + Path string
        + DirIdx uint64
        + LastModTime uint64
        + Length uint64
    }
    class PCStmt << (S,Aquamarine) >> {
        + PC uint64
        + Stmt bool
    }
    class StateMachine << (S,Aquamarine) >> {
        - dbl *DebugLineInfo
        - file string
        - line int
        - address uint64
        - column uint
        - isStmt bool
        - isa uint64
        - basicBlock bool
        - endSeq bool
        - lastDelta int
        - prologueEnd bool
        - epilogueBegin bool
        - valid bool
        - started bool
        - buf *bytes.Buffer
        - opcodes []opcodefn
        - definedFiles []*FileEntry
        - lastAddress uint64
        - lastFile string
        - lastLine int
        - ptrSize int

        - copy() *StateMachine
        - next() error

        + PCToLine(pc uint64) (string, int, bool)

    }
    class formReader << (S,Aquamarine) >> {
        - contentTypes []uint64
        - formCodes []uint64
        - contentType uint64
        - formCode uint64
        - block []byte
        - u64 uint64
        - i64 int64
        - str string
        - err error
        - nexti int

        - reset() 
        - next(buf *bytes.Buffer) bool
        - readBlock(buf *bytes.Buffer, n uint64) 
    }
    class line.opcodefn << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(*StateMachine, *bytes.Buffer) " as fontcolorbluefuncfontStateMachinebytesBuffer {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }

    StateMachine -left-> DebugLineInfo
    StateMachine -down-> FileEntry
    StateMachine -down-> opcodefn
    DebugLineInfo -down-> FileEntry
    DebugLineInfo -down-> DebugLinePrologue
    DebugLineInfo -down-> PCStmt

    Parse -down-> formReader
    Parse -down-> DebugLineInfo
}


"line.fontcolorbluefuncfontStateMachinebytesBuffer" #.left. "line.opcodefn"
@enduml
